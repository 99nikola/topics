@using Topics.Auth;
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/Layouts/MainLayout.cshtml";
    Principal user = (Principal)HttpContext.Current.User;
}

@using Topics.Models

<div class="container d-flex flex-column align-items-stretch gap-4 my-4" id="observer-root">
    @foreach (TopicModel topic in ViewBag.Topics)
    {
        <div class="col card shadow-sm">
            <img name="observer-item" data-src="@topic.CoverImgSrc" class="bd-placeholder-img card-img-top object-fit-cover" alt="Cover image" height="225" width="100%" />
            <div class="card-body d-flex align-items-md-center justify-content-md-between px-5 py-2 gap-3 flex-column  overflow-hidden flex-md-row h-md-250 w-75 align-self-center">
                <div class="d-flex align-items-center gap-2 justify-content-center">
                    @if (string.IsNullOrEmpty(topic.AvatarImgSrc))
                    {
                        <img name="observer-item" data-src="https://st2.depositphotos.com/1309454/5538/v/950/depositphotos_55380965-stock-illustration-avatars-characters.jpg" alt="avatar image" class="avatar shadow-sm border" />
                    }
                    else
                    {
                        <img name="observer-item" data-src="@topic.AvatarImgSrc" alt="avatar image" class="avatar shadow-sm border" />
                    }
                    <div class="d-flex flex-column justify-content-center">
                        <span class="text-black">@topic.Title</span>
                        <span class="text-secondary">@@@topic.Name</span>
                    </div>
                </div>
                <div class="btn-group">
                    @if (topic.IsMemeber(user.Username))
                    {
                        <button class="btn btn-danger" data-topic-name="@topic.Name" name="btn-leave-topic">Leave</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" data-topic-name="@topic.Name" name="btn-join-topic">Join</button>
                    }
                    <button class="btn btn-outline-secondary" name="btn-view-topic" data-href="/topic/get/@topic.Name">View</button>
                </div>
            </div>
        </div>
    }
</div>

<script>
    const btnView = document.getElementsByName("btn-view-topic");
    btnView.forEach(view => 
        view.addEventListener("click", () => location.href = view.attributes["data-href"].nodeValue)
    );

    const btnJoinTopic = document.getElementsByName("btn-join-topic");
    btnJoinTopic.forEach(join => 
        join.addEventListener("click", () => location.href = "/topic/join/" + join.attributes["data-topic-name"].nodeValue)
    );


    const btnLeaveTopic = document.getElementsByName("btn-leave-topic");
    btnLeaveTopic.forEach(leave => 
        leave.addEventListener("click", () => location.href = "/topic/leave/" + leave.attributes["data-topic-name"].nodeValue)
    );


    const divRoot = document.getElementById("observer-root");

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (!entry.isIntersecting) return;

            const element = entry.target;
            const src = element.getAttribute("data-src");

            element.setAttribute("src", src);
            element.removeAttribute("data-src");

            observer.unobserve(element);
        });
    }, {
        root: divRoot.target,
        rootMargin: "0px",
        threshold: 0.25
    });

    const divItems = document.getElementsByName("observer-item");
    divItems.forEach(item => observer.observe(item));

 </script>